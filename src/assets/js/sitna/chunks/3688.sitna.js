"use strict";(self.webpackChunkSITNA=self.webpackChunkSITNA||[]).push([[3688,2026],{2026:(e,s,t)=>{t.r(s),t.d(s,{default:()=>i});var n=t(688),o=t(268);const i=class{constructor(e){const s=this;s.options=e||{},s.url=s.options.url,s.process=s.options.process,s.minimumElevation=s.options.minimumElevation,o.Z.isFunction(s.options.request)&&(s.request=s.options.request),o.Z.isFunction(s.options.parseResponse)&&(s.parseResponse=s.options.parseResponse)}async getElevation(e){const s=this;void 0===(e=e||{}).resolution&&(e.resolution=s.options.resolution),void 0===e.sampleNumber&&(e.sampleNumber=s.options.sampleNumber);const t=await s.request(e);return(e.responseCallback||s.parseResponse).call(s,t,e)}async request(e){const s=this;if((e=e||{}).dataInputs||e.body){const o=await t.e(2688).then(t.t.bind(t,2688,23)),i={process:e.process||s.process,dataInputs:e.dataInputs,responseType:SITNA.Consts.mimeType.JSON,version:e.serviceVersion||s.serviceVersion||"1.0.0",output:e.output},r="boolean"==typeof e.contentType?e.contentType:e.contentType||SITNA.Consts.mimeType.XML;return(await n.Z.ajax({url:s.url,method:"POST",contentType:r,responseType:SITNA.Consts.mimeType.JSON,data:e.body||o.buildExecuteQuery(i)})).data}throw Error("Request is not valid for elevation service")}parseResponse(e,s){var t=this;if(e.coordinates){e.coordinates.forEach((function(e){e[2]<t.minimumElevation&&(e[2]=null)}))}return e.coordinates||[]}cancelRequest(e){}}},3688:(e,s,t)=>{t.r(s),t.d(s,{default:()=>c});var n=t(688),o=t(2026),i=t(268);let r;class a extends o.default{constructor(){super(...arguments);const e=this;e.url=e.options.url||"//servicios.idee.es/wcs-inspire/mdt",e.minimumElevation=e.options.minimumElevation||-9998,e.nativeCRS="EPSG:25830"}async request(e){const s=this;if(1===(e=e||{}).coordinates.length){let o=e.coordinates[0];e.crs&&e.crs!==s.nativeCRS&&(o=i.Z.reproject(o,e.crs,s.nativeCRS));let a="Elevacion25830_5",c=3;const p=c/2,l=c-p,u=[o[0]-p,o[1]-p,o[0]+l,o[1]+l],d=s.url+"?SERVICE=WCS&REQUEST=GetCoverage&VERSION=2.0.1&SUBSET="+encodeURIComponent("x,"+s.nativeCRS+"("+u[0]+","+u[2]+")")+"&SUBSET="+encodeURIComponent("y,"+s.nativeCRS+"("+u[1]+","+u[3]+")")+"&COVERAGEID="+encodeURIComponent(a)+"&RESOLUTION=x(1)&RESOLUTION=y(1)&FORMAT="+encodeURIComponent("application/asc")+"&EXCEPTIONS=XML";if(!r){const e=(await Promise.resolve().then(t.bind(t,4676))).default;r=new e(n.Z.proxify)}return(await r.fetch(d)).responseText}throw new Error("ign.es elevation service supports only points")}parseResponse(e,s){const t=this,n=e.split("\n"),o=n.find((e=>0===e.indexOf("ncols"))),r=parseInt(o&&o.substr(o.lastIndexOf(" "))),a=n.find((e=>0===e.indexOf("nrows"))),c=parseInt(o&&a.substr(a.lastIndexOf(" ")));if(r&&c){const e=n.find((e=>0===e.indexOf("xllcorner"))),o=parseFloat(e&&e.substr(e.lastIndexOf(" "))),a=n.find((e=>0===e.indexOf("yllcorner"))),p=parseFloat(a&&a.substr(a.lastIndexOf(" ")));if(!isNaN(o)&&!isNaN(p)){const e=n.findIndex((e=>0===e.indexOf("cellsize")));let o=parseFloat(n[e+Math.round(c/2)].trim().split(" ")[Math.round(r/2)-1]);isNaN(o)&&(o=null);let a=s.coordinates[0].slice();return a[2]=o,s.crs&&s.crs!==t.nativeCRS&&(a=i.Z.reproject(a,t.nativeCRS,s.crs)),super.parseResponse.call(t,{coordinates:[a]},s)}}return[]}}const c=a}}]);
//# sourceMappingURL=../maps/chunks/3688.sitna.js.map