"use strict";(self.webpackChunkSITNA=self.webpackChunkSITNA||[]).push([[2026],{2026:(e,s,o)=>{o.r(s),o.d(s,{default:()=>i});var t=o(688),n=o(268);const i=class{constructor(e){const s=this;s.options=e||{},s.url=s.options.url,s.process=s.options.process,s.minimumElevation=s.options.minimumElevation,n.Z.isFunction(s.options.request)&&(s.request=s.options.request),n.Z.isFunction(s.options.parseResponse)&&(s.parseResponse=s.options.parseResponse)}async getElevation(e){const s=this;void 0===(e=e||{}).resolution&&(e.resolution=s.options.resolution),void 0===e.sampleNumber&&(e.sampleNumber=s.options.sampleNumber);const o=await s.request(e);return(e.responseCallback||s.parseResponse).call(s,o,e)}async request(e){const s=this;if((e=e||{}).dataInputs||e.body){const n=await o.e(2688).then(o.t.bind(o,2688,23)),i={process:e.process||s.process,dataInputs:e.dataInputs,responseType:SITNA.Consts.mimeType.JSON,version:e.serviceVersion||s.serviceVersion||"1.0.0",output:e.output},r="boolean"==typeof e.contentType?e.contentType:e.contentType||SITNA.Consts.mimeType.XML;return(await t.Z.ajax({url:s.url,method:"POST",contentType:r,responseType:SITNA.Consts.mimeType.JSON,data:e.body||n.buildExecuteQuery(i)})).data}throw Error("Request is not valid for elevation service")}parseResponse(e,s){var o=this;if(e.coordinates){e.coordinates.forEach((function(e){e[2]<o.minimumElevation&&(e[2]=null)}))}return e.coordinates||[]}cancelRequest(e){}}}}]);
//# sourceMappingURL=../maps/chunks/2026.sitna.js.map