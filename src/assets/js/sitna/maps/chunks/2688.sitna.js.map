{"version":3,"file":"chunks/2688.sitna.js","mappings":"2EAAA,IAWYA,EAXRC,EAAKA,GAAM,GACfA,EAAGC,OAASD,EAAGC,QAAU,GAStBD,EAAGC,OANEC,EAAOC,QAOHJ,EAAM,CACNK,kBAAmB,SAAUC,GAGzB,MACS,YAHTA,EAAUA,GAAW,IACGC,SAAW,SAGpBP,EAAIQ,qBAAqBF,GAEzBN,EAAIS,qBAAqBH,IAG5CG,qBAAsB,SAAUH,GAC5BA,EAAUA,GAAW,GACrB,IAAII,EAAM,GACVA,EAAIC,KACnB,qlBAEiBL,EAAQM,8CAGV,IAAIC,EAAaP,EAAQO,WACzB,GAAIA,EACA,IAAK,IAAIC,KAAOD,EACZ,GAAIE,OAAOC,UAAUC,eAAeC,KAAKL,EAAYC,GAAM,CACvD,IAAIK,EAAON,EAAWC,QACT,IAATK,IACAT,EAAIC,KACnC,gCACiBG,kCAGkC,iBAATK,GAAqC,iBAATA,GAAqC,kBAATA,EAC/DT,EAAIC,KAAM,oBAAmBQ,uBAGzBA,EAAKC,UAAYD,EAAKE,OACtBX,EAAIC,KAAM,8BAA6BQ,EAAKC,sBAAsBD,EAAKE,8BAG/EX,EAAIC,KACnC,8BAgBe,OATAD,EAAIC,KACnB,uEAE8BL,EAAQgB,sHAMhBZ,EAAIa,KAAK,KAEpBf,qBAAsB,SAAUF,GAC5BA,EAAUA,GAAW,GACrB,IAAII,EAAM,GACVA,EAAIC,KACnB,qYAEiBL,EAAQM,8CAGV,IAAIC,EAAaP,EAAQO,WACzB,GAAIA,EACA,IAAK,IAAIC,KAAOD,EACZ,GAAIE,OAAOC,UAAUC,eAAeC,KAAKL,EAAYC,GAAM,CACvD,IAAIK,EAAON,EAAWC,GACtB,QAAa,IAATK,EAAmB,CAMnB,IAAIK,EALJd,EAAIC,KACnC,gCACiBG,kCACLA,iBAGmB,MAAMW,SAAoBN,EAC1B,GAAmB,WAAfM,GAA0C,WAAfA,GAA0C,YAAfA,EAA0B,CAChF,cAAeN,GACX,IAAK,SACDK,EAAW,sCACX,MACJ,IAAK,UACDA,EAAW,uCACX,MACJ,QACIA,EAAW,sCAGnBd,EAAIC,KAAM,+BAA8Ba,WAAkBA,MAAaL,6BAGnEA,EAAKC,UAAYD,EAAKE,OACtBX,EAAIC,KAAM,6BAA4BQ,EAAKC,sBAAsBD,EAAKE,+BAG9EX,EAAIC,KAAK,iBAqBzB,OAhBAD,EAAIC,KACnB,qEAEqBL,EAAQgB,iBAEVhB,EAAQoB,QAAUpB,EAAQoB,OAAOC,KACjCjB,EAAIC,KAAM,SAAQL,EAAQoB,OAAOC,QAErCjB,EAAIC,KACnB,kNAOsBD,EAAIa,KAAK","sources":["webpack://SITNA/./TC/format/WPS.js"],"sourcesContent":["var TC = TC || {};\r\nTC.format = TC.format || {};\r\n(function (root, factory) {\r\n    if (typeof exports === \"object\") { // CommonJS\r\n        module.exports = factory();\r\n    } else if (typeof define === \"function\" && define.amd) { // AMD\r\n        define([], factory);\r\n    } else {\r\n        root.WPS = factory();\r\n    }\r\n})(TC.format, function () {\r\n        var WPS = {\r\n            buildExecuteQuery: function (options) {\r\n                options = options || {};\r\n                const version = options.version || '1.0.0';\r\n                switch (version) {\r\n                    case '0.4.0':\r\n                        return WPS.buildExecuteQuery040(options);\r\n                    default:\r\n                        return WPS.buildExecuteQuery100(options);\r\n                }\r\n            },\r\n            buildExecuteQuery100: function (options) {\r\n                options = options || {};\r\n                var xml = [];\r\n                xml.push(\r\n`<?xml version= \"1.0\" encoding= \"UTF-8\" ?>\r\n<wps:Execute version=\"1.0.0\" service=\"WPS\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.opengis.net/wps/1.0.0\" xmlns:wfs=\"http://www.opengis.net/wfs\" xmlns:wps=\"http://www.opengis.net/wps/1.0.0\" xmlns:ows=\"http://www.opengis.net/ows/1.1\" xmlns:gml=\"http://www.opengis.net/gml\" xmlns:ogc=\"http://www.opengis.net/ogc\" xmlns:wcs=\"http://www.opengis.net/wcs/1.1.1\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xsi:schemaLocation=\"http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsAll.xsd\">\r\n<ows:Identifier>${options.process}</ows:Identifier>\r\n<wps:DataInputs>`\r\n                );\r\n                var dataInputs = options.dataInputs;\r\n                if (dataInputs) {\r\n                    for (var key in dataInputs) {\r\n                        if (Object.prototype.hasOwnProperty.call(dataInputs, key)) {\r\n                            var data = dataInputs[key];\r\n                            if (data !== void (0)) {\r\n                                xml.push(\r\n`<wps:Input>\r\n<ows:Identifier>${key}</ows:Identifier>\r\n<wps:Data>`\r\n                                );\r\n                                if (typeof data === 'string' || typeof data === 'number' || typeof data === 'boolean') {\r\n                                    xml.push(`<wps:LiteralData>${data}</wps:LiteralData>`);\r\n                                }\r\n                                else {\r\n                                    if (data.mimeType && data.value) {\r\n                                        xml.push(`<wps:ComplexData mimeType=\"${data.mimeType}\"><![CDATA[${data.value}]]></wps:ComplexData>`);\r\n                                    }\r\n                                }\r\n                                xml.push(\r\n`</wps:Data>\r\n</wps:Input>`\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                xml.push(\r\n`</wps:DataInputs>\r\n<wps:ResponseForm>\r\n<wps:RawDataOutput mimeType=\"${options.responseType}\">\r\n<ows:Identifier>result</ows:Identifier>\r\n</wps:RawDataOutput>\r\n</wps:ResponseForm>\r\n</wps:Execute>`\r\n                );\r\n                return xml.join('');\r\n            },\r\n            buildExecuteQuery040: function (options) {\r\n                options = options || {};\r\n                var xml = [];\r\n                xml.push(\r\n`<?xml version= \"1.0\" encoding= \"UTF-8\" ?>\r\n<wps:Execute service=\"WPS\" version=\"0.4.0\" store=\"false\" status=\"false\" xmlns:wps=\"http://www.opengeospatial.net/wps\" xmlns:ows=\"http://www.opengis.net/ows\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.opengeospatial.net/wps..wpsExecute.xsd\">\r\n<ows:Identifier>${options.process}</ows:Identifier>\r\n<wps:DataInputs>`\r\n                );\r\n                var dataInputs = options.dataInputs;\r\n                if (dataInputs) {\r\n                    for (var key in dataInputs) {\r\n                        if (Object.prototype.hasOwnProperty.call(dataInputs, key)) {\r\n                            var data = dataInputs[key];\r\n                            if (data !== void (0)) {\r\n                                xml.push(\r\n`<wps:Input>\r\n<ows:Identifier>${key}</ows:Identifier>\r\n<ows:Title>${key}</ows:Title>`\r\n                                );\r\n                                var dataType;\r\n                                const typeofData = typeof data;\r\n                                if (typeofData === 'string' || typeofData === 'number' || typeofData === 'boolean') {\r\n                                    switch (typeof data) {\r\n                                        case 'number':\r\n                                            dataType = 'urn:ogc:def:dataType:OGC:0.0:Double';\r\n                                            break;\r\n                                        case 'boolean':\r\n                                            dataType = 'urn:ogc:def:dataType:OGC:0.0:Boolean';\r\n                                            break;\r\n                                        default:\r\n                                            dataType = 'urn:ogc:def:dataType:OGC:0.0:String';\r\n                                            break;\r\n                                    }\r\n                                    xml.push(`<wps:LiteralValue dataType=\"${dataType}\" uom=\"${dataType}\">${data}</wps:LiteralValue>`);\r\n                                }\r\n                                else {\r\n                                    if (data.mimeType && data.value) {\r\n                                        xml.push(`<wps:ComplexValue format=\"${data.mimeType}\"><![CDATA[${data.value}]]></wps:ComplexValue>`);\r\n                                    }\r\n                                }\r\n                                xml.push('</wps:Input>');\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                xml.push(\r\n`</wps:DataInputs>';\r\n<wps:OutputDefinitions>\r\n<wps:Output format=\"${options.responseType}\"`\r\n                );\r\n                if (options.output && options.output.uom) {\r\n                    xml.push(` uom=\"${options.output.uom}\"`);\r\n                }\r\n                xml.push(\r\n` encoding=\"UTF-8\" schema=\"http://schemas.opengis.net/gml/3.0.0/base/gml.xsd\">\r\n<ows:Identifier>result</ows:Identifier>\r\n<ows:Title>result</ows:Title>\r\n</wps:Output>\r\n</wps:OutputDefinitions>\r\n</wps:Execute>`\r\n                );\r\n                return xml.join('');\r\n            }\r\n        };\r\n        return WPS;\r\n});"],"names":["WPS","TC","format","module","exports","buildExecuteQuery","options","version","buildExecuteQuery040","buildExecuteQuery100","xml","push","process","dataInputs","key","Object","prototype","hasOwnProperty","call","data","mimeType","value","responseType","join","dataType","typeofData","output","uom"],"sourceRoot":""}