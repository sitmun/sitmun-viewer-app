{"version":3,"file":"chunks/TC_cesium_cesium_js.sitna.debug.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AAqFgB;AAChB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,eAAe;AACf,yBAAyB;AACzB,oBAAoB;AACpB,sBAAsB;AACtB,YAAY;AACZ,gBAAgB;AAChB,gBAAgB;AAChB,kBAAkB;AAClB,2BAA2B;AAC3B,oBAAoB;AACpB,gBAAgB;AAChB,eAAe;AACf,WAAW;AACX,oCAAoC;AACpC,2BAA2B;AAC3B,aAAa;AACb,YAAY;AACZ,oBAAoB;AACpB,sBAAsB;AACtB,0BAA0B;AAC1B,uBAAuB;AACvB,oBAAoB;AACpB,oBAAoB;AACpB,eAAe;AACf,uBAAuB;AACvB,8BAA8B;AAC9B,YAAY;AACZ,WAAW;AACX,iBAAiB;AACjB,4BAA4B;AAC5B,sBAAsB;AACtB,WAAW;AACX,qBAAqB;AACrB,uBAAuB;AACvB,qBAAqB;AACrB,0BAA0B;AAC1B,sBAAsB;AACtB,kBAAkB;AAClB,kBAAkB;AAClB,uBAAuB;AACvB,gBAAgB;AAChB,gBAAgB;AAChB,UAAU;AACV,aAAa;AACb,aAAa;AACb,gBAAgB;AAChB,qBAAqB;AACrB,sBAAsB;AACtB,qBAAqB;AACrB,kCAAkC;AAClC,cAAc;AACd,gBAAgB;AAChB,SAAS;AACT,eAAe;AACf,sBAAsB;AACtB,kBAAkB;AAClB,cAAc;AACd,kBAAkB;AAClB,6BAA6B;AAC7B,0BAA0B;AAC1B,mBAAmB;AACnB,YAAY;AACZ,qBAAqB;AACrB,oCAAoC;AACpC,uBAAuB;AACvB,4BAA4B;AAC5B,gBAAgB;AAChB,oBAAoB;AACpB,oBAAoB;AACpB,YAAY;AACZ,kCAAkC;AAClC,sCAAsC;AACtC,UAAU;AACV,kBAAkB;AAClB,aAAa;AACb,wBAAwB;AACxB,+BAA+B;AAC/B,aAAa;AACb,iBAAiB;AACjB,kBAAkB;AAClB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kQAAqD;AACzsEAAsE,uBAAuB;AAC7F;AACA;AACA,kBAAkB;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,iEAAe,MAAM","sources":["webpack://SITNA/./TC/cesium/cesium.js"],"sourcesContent":["\r\nwindow.CESIUM_BASE_URL = TC.apiLocation + 'lib/cesium/build/';\r\n\r\nimport {\r\n    ApproximateTerrainHeights\r\n    , Billboard\r\n    , BillboardCollection\r\n    , BoundingSphere\r\n    , CallbackProperty\r\n    , Camera\r\n    , Cartesian2\r\n    , Cartesian3\r\n    , Cartographic\r\n    , CesiumTerrainProvider\r\n    , CircleGeometry\r\n    , ClockRange\r\n    , ClockStep\r\n    , Color\r\n    , ColorGeometryInstanceAttribute\r\n    , ColorMaterialProperty\r\n    , combine\r\n    , Credit\r\n    , CzmlDataSource\r\n    , CustomDataSource\r\n    , DataSourceCollection\r\n    , DataSourceDisplay\r\n    , DeveloperError\r\n    , EasingFunction\r\n    , Ellipsoid\r\n    , EllipsoidGeodesic\r\n    , EllipsoidTerrainProvider\r\n    , Entity\r\n    , Event\r\n    , EventHelper\r\n    , GeographicTilingScheme\r\n    , GeometryInstance\r\n    , Globe\r\n    , GroundPrimitive\r\n    , HeadingPitchRange\r\n    , HeightReference\r\n    , HeightmapTerrainData\r\n    , HorizontalOrigin\r\n    , ImageryLayer\r\n    , ImageryState\r\n    , IntersectionTests\r\n    , JulianDate\r\n    , LabelStyle\r\n    , Math\r\n    , Matrix3\r\n    , Matrix4\r\n    , PinBuilder\r\n    , PolygonGeometry\r\n    , PolygonHierarchy\r\n    , PolygonPipeline\r\n    , PolylineDashMaterialProperty\r\n    , Property\r\n    , Quaternion\r\n    , Ray\r\n    , Rectangle\r\n    , RequestScheduler\r\n    , RequestState\r\n    , Resource\r\n    , RuntimeError\r\n    , ScreenSpaceEventHandler\r\n    , ScreenSpaceEventType\r\n    , SkyAtmosphere\r\n    , SkyBox\r\n    , TerrainProvider\r\n    , TileCoordinatesImageryProvider\r\n    , TileProviderError\r\n    , TimeIntervalCollection\r\n    , Transforms\r\n    , TrustedServers\r\n    , VerticalOrigin\r\n    , Viewer\r\n    , WebMapServiceImageryProvider\r\n    , WebMapTileServiceImageryProvider\r\n    , when\r\n    , defaultValue\r\n    , defined\r\n    , deprecationWarning\r\n    , sampleTerrainMostDetailed\r\n    , Request\r\n    , RequestType\r\n    , TimeInterval\r\n    , VERSION\r\n\r\n} from 'cesium';\r\n\r\n\r\n\r\nconst cesium = {\r\n\r\n    ApproximateTerrainHeights\r\n    , Billboard\r\n    , BillboardCollection\r\n    , BoundingSphere\r\n    , CallbackProperty\r\n    , Camera\r\n    , Cartesian2\r\n    , Cartesian3\r\n    , Cartographic\r\n    , CesiumTerrainProvider\r\n    , CircleGeometry\r\n    , ClockRange\r\n    , ClockStep\r\n    , Color\r\n    , ColorGeometryInstanceAttribute\r\n    , ColorMaterialProperty\r\n    , combine\r\n    , Credit\r\n    , CzmlDataSource\r\n    , CustomDataSource\r\n    , DataSourceCollection\r\n    , DataSourceDisplay\r\n    , DeveloperError\r\n    , EasingFunction\r\n    , Ellipsoid\r\n    , EllipsoidGeodesic\r\n    , EllipsoidTerrainProvider\r\n    , Entity\r\n    , Event\r\n    , EventHelper\r\n    , GeographicTilingScheme\r\n    , GeometryInstance\r\n    , Globe\r\n    , GroundPrimitive\r\n    , HeadingPitchRange\r\n    , HeightReference\r\n    , HeightmapTerrainData\r\n    , HorizontalOrigin\r\n    , ImageryLayer\r\n    , ImageryState\r\n    , IntersectionTests\r\n    , JulianDate\r\n    , LabelStyle\r\n    , Math\r\n    , Matrix3\r\n    , Matrix4\r\n    , PinBuilder\r\n    , PolygonGeometry\r\n    , PolygonHierarchy\r\n    , PolygonPipeline\r\n    , PolylineDashMaterialProperty\r\n    , Property\r\n    , Quaternion\r\n    , Ray\r\n    , Rectangle\r\n    , RequestScheduler\r\n    , RequestState\r\n    , Resource\r\n    , RuntimeError\r\n    , ScreenSpaceEventHandler\r\n    , ScreenSpaceEventType\r\n    , SkyAtmosphere\r\n    , SkyBox\r\n    , TerrainProvider\r\n    , TileCoordinatesImageryProvider\r\n    , TileProviderError\r\n    , TimeIntervalCollection\r\n    , Transforms\r\n    , TrustedServers\r\n    , VerticalOrigin\r\n    , Viewer\r\n    , WebMapServiceImageryProvider\r\n    , WebMapTileServiceImageryProvider\r\n    , when\r\n    , defaultValue\r\n    , defined\r\n    , deprecationWarning\r\n    , sampleTerrainMostDetailed\r\n    , Request\r\n    , RequestType\r\n    , TimeInterval\r\n    , VERSION\r\n};\r\n\r\nconst TOO_MANY_PARALLEL_REQUESTS = \"Too many parallel requests, so postpone loading tile\";\r\nwindow.cesium = cesium;\r\n\r\nif (!cesium.WCSTerrainProvider) {\r\n    //TC.syncLoadJS(TC.apiLocation + 'TC/cesium/mergeTerrainProvider/MergeTerrainProvider');\r\n    import('./mergeTerrainProvider/MergeTerrainProvider').then(function (MergeTerrainProvider) {\r\n        cesium.MergeTerrainProvider = MergeTerrainProvider.default;\r\n    })\r\n}\r\n\r\n/* sobrescribimos y extendemos lo necesario para que todas las peticiones pasen por el algoritmo de proxificaci칩n */\r\n// requerido para a침adir la referencia a la capa TC\r\ncesium.Resource.prototype._clone = cesium.Resource.prototype.clone;\r\ncesium.Resource.prototype.clone = function () {\r\n    let cloned = cesium.Resource.prototype._clone.apply(this, arguments);\r\n    cloned.tcLayer = this.tcLayer;\r\n    return cloned;\r\n};\r\n\r\n// requerido para gestionar la promesa rechaza directamente que vamos a retornar en lugar del undefined que retorna cesium en fetchImage\r\ncesium.ImageryLayer.prototype.__requestImagery = cesium.ImageryLayer.prototype._requestImagery;\r\ncesium.ImageryLayer.prototype._requestImagery = function (imagery) {\r\n    var imageryProvider = this._imageryProvider;\r\n\r\n    var that = this;\r\n\r\n    function success(image) {\r\n        if (!cesium.defined(image)) {\r\n            return failure();\r\n        }\r\n\r\n        imagery.image = image;\r\n        imagery.state = cesium.ImageryState.RECEIVED;\r\n        imagery.request = undefined;\r\n\r\n        cesium.TileProviderError.handleSuccess(that._requestImageError);\r\n    }\r\n\r\n    function failure(e) {\r\n        if (typeof e === 'string' && e === TOO_MANY_PARALLEL_REQUESTS) {\r\n            // Too many parallel requests, so postpone loading tile.\r\n            imagery.state = cesium.ImageryState.UNLOADED;\r\n            imagery.request = undefined;\r\n            return;\r\n        } else if (e.status && e.status.toString() === \"200\") {\r\n            // si llega alguna excepci칩n en XML como cuerpo de la petici칩n de una imagen, pasamos de ella\r\n            imagery.state = cesium.ImageryState.FAILED;\r\n            imagery.request = undefined;\r\n            return;\r\n        }\r\n\r\n        if (imagery.request.state === cesium.RequestState.CANCELLED) {\r\n            // Cancelled due to low priority - try again later.\r\n            imagery.state = cesium.ImageryState.UNLOADED;\r\n            imagery.request = undefined;\r\n            return;\r\n        }\r\n\r\n        // Initially assume failure.  handleError may retry, in which case the state will\r\n        // change to TRANSITIONING.\r\n        imagery.state = cesium.ImageryState.FAILED;\r\n        imagery.request = undefined;\r\n\r\n        var message =\r\n            \"Failed to obtain image tile X: \" +\r\n            imagery.x +\r\n            \" Y: \" +\r\n            imagery.y +\r\n            \" Level: \" +\r\n            imagery.level +\r\n            \".\";\r\n        that._requestImageError = cesium.TileProviderError.handleError(\r\n            that._requestImageError,\r\n            imageryProvider,\r\n            imageryProvider.errorEvent,\r\n            message,\r\n            imagery.x,\r\n            imagery.y,\r\n            imagery.level,\r\n            doRequest,\r\n            e\r\n        );\r\n    }\r\n\r\n    function doRequest() {\r\n        var request = new cesium.Request({\r\n            throttle: false,\r\n            throttleByServer: true,\r\n            type: cesium.RequestType.IMAGERY,\r\n        });\r\n        imagery.request = request;\r\n        imagery.state = cesium.ImageryState.TRANSITIONING;\r\n        var imagePromise = imageryProvider.requestImage(\r\n            imagery.x,\r\n            imagery.y,\r\n            imagery.level,\r\n            request\r\n        );\r\n\r\n        // cesium hace lo siguiente y es lo que no nos encaja y que nosotros gestionamos en failure\r\n        if (!cesium.defined(imagePromise)) {\r\n            // Too many parallel requests, so postpone loading tile.\r\n            imagery.state = cesium.ImageryState.UNLOADED;\r\n            imagery.request = undefined;\r\n            return;\r\n        }\r\n\r\n        if (cesium.defined(imageryProvider.getTileCredits)) {\r\n            imagery.credits = imageryProvider.getTileCredits(\r\n                imagery.x,\r\n                imagery.y,\r\n                imagery.level\r\n            );\r\n        }\r\n\r\n        cesium.when(imagePromise, success, failure);\r\n    }\r\n\r\n    doRequest();\r\n};\r\n\r\n// requerido para que pasar por el algoritmo de proxificaci칩n\r\ncesium.Resource.prototype._fetchImage = cesium.Resource.prototype.fetchImage;\r\ncesium.Resource.prototype.fetchImage = function () {\r\n    if (this.tcLayer) {\r\n        let self = this;\r\n        let options = arguments;\r\n\r\n        let deferred = cesium.when.defer();\r\n\r\n        this.tcLayer.getWebGLUrl.call(this.tcLayer, this.url)\r\n            .then(function (params) {\r\n                self.url = params.url;\r\n                let image = params.image ? new Promise((resolve) => { resolve(params.image) }) : cesium.Resource.prototype._fetchImage.apply(self, options);\r\n                if (image) {\r\n                    image.then(deferred.resolve);\r\n                } else {\r\n                    deferred.reject(TOO_MANY_PARALLEL_REQUESTS);\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                deferred.reject(error);\r\n            });\r\n\r\n        return deferred.promise;\r\n    } else {\r\n        return cesium.Resource.prototype._fetchImage.apply(this, arguments);\r\n    }\r\n};\r\n\r\nexport default cesium;"],"names":[],"sourceRoot":""}