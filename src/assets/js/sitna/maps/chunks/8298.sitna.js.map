{"version":3,"file":"chunks/8298.sitna.js","mappings":"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","sources":["webpack://SITNA/./TC/cesium/cesium.js"],"sourcesContent":["\r\nwindow.CESIUM_BASE_URL = TC.apiLocation + 'lib/cesium/build/';\r\n\r\nimport {\r\n    ApproximateTerrainHeights\r\n    , Billboard\r\n    , BillboardCollection\r\n    , BoundingSphere\r\n    , CallbackProperty\r\n    , Camera\r\n    , Cartesian2\r\n    , Cartesian3\r\n    , Cartographic\r\n    , CesiumTerrainProvider\r\n    , CircleGeometry\r\n    , ClockRange\r\n    , ClockStep\r\n    , Color\r\n    , ColorGeometryInstanceAttribute\r\n    , ColorMaterialProperty\r\n    , combine\r\n    , Credit\r\n    , CzmlDataSource\r\n    , CustomDataSource\r\n    , DataSourceCollection\r\n    , DataSourceDisplay\r\n    , DeveloperError\r\n    , EasingFunction\r\n    , Ellipsoid\r\n    , EllipsoidGeodesic\r\n    , EllipsoidTerrainProvider\r\n    , Entity\r\n    , Event\r\n    , EventHelper\r\n    , GeographicTilingScheme\r\n    , GeometryInstance\r\n    , Globe\r\n    , GroundPrimitive\r\n    , HeadingPitchRange\r\n    , HeightReference\r\n    , HeightmapTerrainData\r\n    , HorizontalOrigin\r\n    , ImageryLayer\r\n    , ImageryState\r\n    , IntersectionTests\r\n    , JulianDate\r\n    , LabelStyle\r\n    , Math\r\n    , Matrix3\r\n    , Matrix4\r\n    , PinBuilder\r\n    , PolygonGeometry\r\n    , PolygonHierarchy\r\n    , PolygonPipeline\r\n    , PolylineDashMaterialProperty\r\n    , Property\r\n    , Quaternion\r\n    , Ray\r\n    , Rectangle\r\n    , RequestScheduler\r\n    , RequestState\r\n    , Resource\r\n    , RuntimeError\r\n    , ScreenSpaceEventHandler\r\n    , ScreenSpaceEventType\r\n    , SkyAtmosphere\r\n    , SkyBox\r\n    , TerrainProvider\r\n    , TileCoordinatesImageryProvider\r\n    , TileProviderError\r\n    , TimeIntervalCollection\r\n    , Transforms\r\n    , TrustedServers\r\n    , VerticalOrigin\r\n    , Viewer\r\n    , WebMapServiceImageryProvider\r\n    , WebMapTileServiceImageryProvider\r\n    , when\r\n    , defaultValue\r\n    , defined\r\n    , deprecationWarning\r\n    , sampleTerrainMostDetailed\r\n    , Request\r\n    , RequestType\r\n    , TimeInterval\r\n    , VERSION\r\n\r\n} from 'cesium';\r\n\r\n\r\n\r\nconst cesium = {\r\n\r\n    ApproximateTerrainHeights\r\n    , Billboard\r\n    , BillboardCollection\r\n    , BoundingSphere\r\n    , CallbackProperty\r\n    , Camera\r\n    , Cartesian2\r\n    , Cartesian3\r\n    , Cartographic\r\n    , CesiumTerrainProvider\r\n    , CircleGeometry\r\n    , ClockRange\r\n    , ClockStep\r\n    , Color\r\n    , ColorGeometryInstanceAttribute\r\n    , ColorMaterialProperty\r\n    , combine\r\n    , Credit\r\n    , CzmlDataSource\r\n    , CustomDataSource\r\n    , DataSourceCollection\r\n    , DataSourceDisplay\r\n    , DeveloperError\r\n    , EasingFunction\r\n    , Ellipsoid\r\n    , EllipsoidGeodesic\r\n    , EllipsoidTerrainProvider\r\n    , Entity\r\n    , Event\r\n    , EventHelper\r\n    , GeographicTilingScheme\r\n    , GeometryInstance\r\n    , Globe\r\n    , GroundPrimitive\r\n    , HeadingPitchRange\r\n    , HeightReference\r\n    , HeightmapTerrainData\r\n    , HorizontalOrigin\r\n    , ImageryLayer\r\n    , ImageryState\r\n    , IntersectionTests\r\n    , JulianDate\r\n    , LabelStyle\r\n    , Math\r\n    , Matrix3\r\n    , Matrix4\r\n    , PinBuilder\r\n    , PolygonGeometry\r\n    , PolygonHierarchy\r\n    , PolygonPipeline\r\n    , PolylineDashMaterialProperty\r\n    , Property\r\n    , Quaternion\r\n    , Ray\r\n    , Rectangle\r\n    , RequestScheduler\r\n    , RequestState\r\n    , Resource\r\n    , RuntimeError\r\n    , ScreenSpaceEventHandler\r\n    , ScreenSpaceEventType\r\n    , SkyAtmosphere\r\n    , SkyBox\r\n    , TerrainProvider\r\n    , TileCoordinatesImageryProvider\r\n    , TileProviderError\r\n    , TimeIntervalCollection\r\n    , Transforms\r\n    , TrustedServers\r\n    , VerticalOrigin\r\n    , Viewer\r\n    , WebMapServiceImageryProvider\r\n    , WebMapTileServiceImageryProvider\r\n    , when\r\n    , defaultValue\r\n    , defined\r\n    , deprecationWarning\r\n    , sampleTerrainMostDetailed\r\n    , Request\r\n    , RequestType\r\n    , TimeInterval\r\n    , VERSION\r\n};\r\n\r\nconst TOO_MANY_PARALLEL_REQUESTS = \"Too many parallel requests, so postpone loading tile\";\r\nwindow.cesium = cesium;\r\n\r\nif (!cesium.WCSTerrainProvider) {\r\n    //TC.syncLoadJS(TC.apiLocation + 'TC/cesium/mergeTerrainProvider/MergeTerrainProvider');\r\n    import('./mergeTerrainProvider/MergeTerrainProvider').then(function (MergeTerrainProvider) {\r\n        cesium.MergeTerrainProvider = MergeTerrainProvider.default;\r\n    })\r\n}\r\n\r\n/* sobrescribimos y extendemos lo necesario para que todas las peticiones pasen por el algoritmo de proxificaci칩n */\r\n// requerido para a침adir la referencia a la capa TC\r\ncesium.Resource.prototype._clone = cesium.Resource.prototype.clone;\r\ncesium.Resource.prototype.clone = function () {\r\n    let cloned = cesium.Resource.prototype._clone.apply(this, arguments);\r\n    cloned.tcLayer = this.tcLayer;\r\n    return cloned;\r\n};\r\n\r\n// requerido para gestionar la promesa rechaza directamente que vamos a retornar en lugar del undefined que retorna cesium en fetchImage\r\ncesium.ImageryLayer.prototype.__requestImagery = cesium.ImageryLayer.prototype._requestImagery;\r\ncesium.ImageryLayer.prototype._requestImagery = function (imagery) {\r\n    var imageryProvider = this._imageryProvider;\r\n\r\n    var that = this;\r\n\r\n    function success(image) {\r\n        if (!cesium.defined(image)) {\r\n            return failure();\r\n        }\r\n\r\n        imagery.image = image;\r\n        imagery.state = cesium.ImageryState.RECEIVED;\r\n        imagery.request = undefined;\r\n\r\n        cesium.TileProviderError.handleSuccess(that._requestImageError);\r\n    }\r\n\r\n    function failure(e) {\r\n        if (typeof e === 'string' && e === TOO_MANY_PARALLEL_REQUESTS) {\r\n            // Too many parallel requests, so postpone loading tile.\r\n            imagery.state = cesium.ImageryState.UNLOADED;\r\n            imagery.request = undefined;\r\n            return;\r\n        } else if (e.status && e.status.toString() === \"200\") {\r\n            // si llega alguna excepci칩n en XML como cuerpo de la petici칩n de una imagen, pasamos de ella\r\n            imagery.state = cesium.ImageryState.FAILED;\r\n            imagery.request = undefined;\r\n            return;\r\n        }\r\n\r\n        if (imagery.request.state === cesium.RequestState.CANCELLED) {\r\n            // Cancelled due to low priority - try again later.\r\n            imagery.state = cesium.ImageryState.UNLOADED;\r\n            imagery.request = undefined;\r\n            return;\r\n        }\r\n\r\n        // Initially assume failure.  handleError may retry, in which case the state will\r\n        // change to TRANSITIONING.\r\n        imagery.state = cesium.ImageryState.FAILED;\r\n        imagery.request = undefined;\r\n\r\n        var message =\r\n            \"Failed to obtain image tile X: \" +\r\n            imagery.x +\r\n            \" Y: \" +\r\n            imagery.y +\r\n            \" Level: \" +\r\n            imagery.level +\r\n            \".\";\r\n        that._requestImageError = cesium.TileProviderError.handleError(\r\n            that._requestImageError,\r\n            imageryProvider,\r\n            imageryProvider.errorEvent,\r\n            message,\r\n            imagery.x,\r\n            imagery.y,\r\n            imagery.level,\r\n            doRequest,\r\n            e\r\n        );\r\n    }\r\n\r\n    function doRequest() {\r\n        var request = new cesium.Request({\r\n            throttle: false,\r\n            throttleByServer: true,\r\n            type: cesium.RequestType.IMAGERY,\r\n        });\r\n        imagery.request = request;\r\n        imagery.state = cesium.ImageryState.TRANSITIONING;\r\n        var imagePromise = imageryProvider.requestImage(\r\n            imagery.x,\r\n            imagery.y,\r\n            imagery.level,\r\n            request\r\n        );\r\n\r\n        // cesium hace lo siguiente y es lo que no nos encaja y que nosotros gestionamos en failure\r\n        if (!cesium.defined(imagePromise)) {\r\n            // Too many parallel requests, so postpone loading tile.\r\n            imagery.state = cesium.ImageryState.UNLOADED;\r\n            imagery.request = undefined;\r\n            return;\r\n        }\r\n\r\n        if (cesium.defined(imageryProvider.getTileCredits)) {\r\n            imagery.credits = imageryProvider.getTileCredits(\r\n                imagery.x,\r\n                imagery.y,\r\n                imagery.level\r\n            );\r\n        }\r\n\r\n        cesium.when(imagePromise, success, failure);\r\n    }\r\n\r\n    doRequest();\r\n};\r\n\r\n// requerido para que pasar por el algoritmo de proxificaci칩n\r\ncesium.Resource.prototype._fetchImage = cesium.Resource.prototype.fetchImage;\r\ncesium.Resource.prototype.fetchImage = function () {\r\n    if (this.tcLayer) {\r\n        let self = this;\r\n        let options = arguments;\r\n\r\n        let deferred = cesium.when.defer();\r\n\r\n        this.tcLayer.getWebGLUrl.call(this.tcLayer, this.url)\r\n            .then(function (params) {\r\n                self.url = params.url;\r\n                let image = params.image ? new Promise((resolve) => { resolve(params.image) }) : cesium.Resource.prototype._fetchImage.apply(self, options);\r\n                if (image) {\r\n                    image.then(deferred.resolve);\r\n                } else {\r\n                    deferred.reject(TOO_MANY_PARALLEL_REQUESTS);\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                deferred.reject(error);\r\n            });\r\n\r\n        return deferred.promise;\r\n    } else {\r\n        return cesium.Resource.prototype._fetchImage.apply(this, arguments);\r\n    }\r\n};\r\n\r\nexport default cesium;"],"names":["window","CESIUM_BASE_URL","TC","apiLocation","cesium","ApproximateTerrainHeights","Billboard","BillboardCollection","BoundingSphere","CallbackProperty","Camera","Cartesian2","Cartesian3","Cartographic","CesiumTerrainProvider","CircleGeometry","ClockRange","ClockStep","Color","ColorGeometryInstanceAttribute","ColorMaterialProperty","combine","Credit","CzmlDataSource","CustomDataSource","DataSourceCollection","DataSourceDisplay","DeveloperError","EasingFunction","Ellipsoid","EllipsoidGeodesic","EllipsoidTerrainProvider","Entity","Event","EventHelper","GeographicTilingScheme","GeometryInstance","Globe","GroundPrimitive","HeadingPitchRange","HeightReference","HeightmapTerrainData","HorizontalOrigin","ImageryLayer","ImageryState","IntersectionTests","JulianDate","LabelStyle","Math","Matrix3","Matrix4","PinBuilder","PolygonGeometry","PolygonHierarchy","PolygonPipeline","PolylineDashMaterialProperty","Property","Quaternion","Ray","Rectangle","RequestScheduler","RequestState","Resource","RuntimeError","ScreenSpaceEventHandler","ScreenSpaceEventType","SkyAtmosphere","SkyBox","TerrainProvider","TileCoordinatesImageryProvider","TileProviderError","TimeIntervalCollection","Transforms","TrustedServers","VerticalOrigin","Viewer","WebMapServiceImageryProvider","WebMapTileServiceImageryProvider","when","defaultValue","defined","deprecationWarning","sampleTerrainMostDetailed","Request","RequestType","TimeInterval","VERSION","TOO_MANY_PARALLEL_REQUESTS","WCSTerrainProvider","then","MergeTerrainProvider","default","prototype","_clone","clone","cloned","apply","this","arguments","tcLayer","__requestImagery","_requestImagery","imagery","imageryProvider","_imageryProvider","that","success","image","failure","state","RECEIVED","request","undefined","handleSuccess","_requestImageError","e","UNLOADED","status","toString","FAILED","CANCELLED","message","x","y","level","handleError","errorEvent","doRequest","throttle","throttleByServer","type","IMAGERY","TRANSITIONING","imagePromise","requestImage","getTileCredits","credits","_fetchImage","fetchImage","self","options","deferred","defer","getWebGLUrl","call","url","params","Promise","resolve","reject","catch","error","promise"],"sourceRoot":""}