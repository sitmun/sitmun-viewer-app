{"version":3,"file":"chunks/6468.sitna.js","mappings":"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","sources":["webpack://SITNA/./TC/tool/ElevationService.js","webpack://SITNA/./TC/tool/ElevationServiceIGNFr.js"],"sourcesContent":["import TC from '../../TC';\r\nimport Util from '../Util'\r\n/**\r\n  * Opciones de servicio de obtención de elevaciones de puntos.\r\n  * @typedef ElevationServiceOptions\r\n  * @memberof SITNA\r\n  * @see SITNA.ElevationOptions\r\n  * @property {string[]} [allowedGeometryTypes] - Si se establece, indica para qué geometrías se van a hacer consultas \r\n  * de elevación al servicio. Esto es conveniente por ejemplo si el servicio solo permite obtener elevaciones de un punto simple,\r\n  * invalidándolo para la consulta si la geometría es un polígono o una línea. Los elementos del array tienen que ser cadenas \r\n  * cuyos valores deben ser los definidos por [SITNA.Consts.geom]{@link SITNA.Consts}.\r\n  * @property {string} [googleMapsKey] - Valor de una clave válida de la API de Google Maps. Solamente es necesaria cuando \r\n  * el valor de la propiedad `name` es [SITNA.Consts.elevationService.GOOGLE]{@link SITNA.Consts}.\r\n  *\r\n  * Puede obtener más información en el [sitio para desarrolladores de Google](https://developers.google.com/maps/documentation/javascript/get-api-key).\r\n  * @property {string} name - Nombre del servicio que queremos utilizar. Debe tener un valor de [SITNA.Consts.elevationService]{@link SITNA.Consts}.\r\n  * @property {string} [url] - URL del servicio. Cada servicio de elevaciones de puntos tiene asignada una URL por defecto, \r\n  * así que rara vez será necesario establecer esta propiedad.\r\n  */\r\n\r\nclass ElevationService { \r\n    constructor(options) {\r\n        const self = this;\r\n        self.options = options || {};\r\n        self.url = self.options.url;\r\n        self.process = self.options.process;\r\n        self.minimumElevation = self.options.minimumElevation;\r\n        if (Util.isFunction(self.options.request)) {\r\n            self.request = self.options.request;\r\n        }\r\n        if (Util.isFunction(self.options.parseResponse)) {\r\n            self.parseResponse = self.options.parseResponse;\r\n        }\r\n    }\r\n\r\n    async getElevation(options) {\r\n        const self = this;\r\n        options = options || {};\r\n        if (options.resolution === undefined) {\r\n            options.resolution = self.options.resolution;\r\n        }\r\n        if (options.sampleNumber === undefined) {\r\n            options.sampleNumber = self.options.sampleNumber;\r\n        }\r\n        const response = await self.request(options);\r\n        return (options.responseCallback || self.parseResponse).call(self, response, options);\r\n    }\r\n\r\n    async request(options) {\r\n        const self = this;\r\n        options = options || {};\r\n        if (options.dataInputs || options.body) {\r\n            const WPS = await import('../format/WPS');\r\n            const data = {\r\n                process: options.process || self.process,\r\n                dataInputs: options.dataInputs,\r\n                responseType: SITNA.Consts.mimeType.JSON,\r\n                version: options.serviceVersion || self.serviceVersion || '1.0.0',\r\n                output: options.output\r\n            };\r\n            const contentType = typeof options.contentType === 'boolean' ? options.contentType : options.contentType || SITNA.Consts.mimeType.XML;\r\n            const response = await TC.ajax({\r\n                url: self.url,\r\n                method: 'POST',\r\n                contentType: contentType,\r\n                responseType: SITNA.Consts.mimeType.JSON,\r\n                data: options.body || WPS.buildExecuteQuery(data)\r\n            });\r\n            return response.data;\r\n        }\r\n        else {\r\n            throw Error('Request is not valid for elevation service');\r\n        }\r\n    }\r\n\r\n    parseResponse(response, _options) {\r\n        var self = this;\r\n        if (response.coordinates) {\r\n            const coords = response.coordinates;\r\n            coords.forEach(function (coord) {\r\n                if (coord[2] < self.minimumElevation) {\r\n                    coord[2] = null;\r\n                }\r\n            });\r\n        }\r\n        return response.coordinates || [];\r\n    }\r\n\r\n    cancelRequest(_id) {\r\n\r\n    }\r\n}\r\n\r\nexport default ElevationService;","import ElevationService from './ElevationService';\r\nimport Util from '../Util';\r\n\r\nclass ElevationServiceIGNFr extends ElevationService {\r\n    constructor() {\r\n        super(...arguments);\r\n        const self = this;\r\n        self.url = self.options.url || '//wxs.ign.fr/essentiels/alti/wps';\r\n        self.process = self.options.process || 'gs:WPSElevation';\r\n        self.profileProcess = self.options.profileProcess || 'gs:WPSLineElevation';\r\n        self.minimumElevation = self.options.minimumElevation || -99998;\r\n        self.nativeCRS = 'EPSG:4326';\r\n    }\r\n\r\n    request(options) {\r\n        const self = this;\r\n        options = options || {};\r\n        let coordinateList = options.coordinates;\r\n        if (options.crs && options.crs !== self.nativeCRS) {\r\n            coordinateList = Util.reproject(coordinateList, options.crs, self.nativeCRS);\r\n        }\r\n        const dataInputs = {\r\n            lon: coordinateList.map(function (coord) {\r\n                return coord[0];\r\n            }).join('|'),\r\n            lat: coordinateList.map(function (coord) {\r\n                return coord[1];\r\n            }).join('|'),\r\n            crs: 'crs:84',\r\n            format: 'json'\r\n        };\r\n        return super.request.call(self, { dataInputs: dataInputs, process: self.process });\r\n    }\r\n\r\n    parseResponse(response, options) {\r\n        const self = this;\r\n        if (response.elevations) {\r\n            var elevations = response.elevations.map(function (elev) {\r\n                return [elev.lon, elev.lat, elev.z];\r\n            });\r\n            if (options.crs && options.crs !== self.nativeCRS) {\r\n                elevations = Util.reproject(elevations, self.nativeCRS, options.crs);\r\n            }\r\n            return super.parseResponse.call(self, { coordinates: elevations }, options);\r\n        }\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default ElevationServiceIGNFr;"],"names":["constructor","options","self","this","url","process","minimumElevation","Util","request","parseResponse","async","undefined","resolution","sampleNumber","response","responseCallback","call","dataInputs","body","WPS","data","responseType","SITNA","Consts","mimeType","JSON","version","serviceVersion","output","contentType","XML","TC","method","buildExecuteQuery","Error","_options","coordinates","forEach","coord","cancelRequest","_id","ElevationServiceIGNFr","ElevationService","super","arguments","profileProcess","nativeCRS","coordinateList","crs","lon","map","join","lat","format","elevations","elev","z"],"sourceRoot":""}